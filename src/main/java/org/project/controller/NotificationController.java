package org.project.controller;

import lombok.RequiredArgsConstructor;
import org.apache.tomcat.util.net.openssl.ciphers.Authentication;
import org.project.entity.*;
import org.project.repository.AppointmentRepository;
import org.project.repository.PatientRepository;
import org.project.repository.UserRepository;
import org.project.service.EmailService;
import org.project.service.NotificationService;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Controller
@RequestMapping("/api/notifications")
@RequiredArgsConstructor
public class NotificationController {

    private final NotificationService notificationService;
    private final EmailService emailService;
    private final AppointmentRepository appointmentRepository;
    private final UserRepository userRepository;
    private final PatientRepository patientRepository;

    @GetMapping("/form")
    public String showNotificationForm() {
        return "notification_form";
    }

    // g·ª≠i th√¥ng b√°o thu cong
    @PostMapping("/send")
    public ResponseEntity<NotificationEntity> sendManualNotification(
            @RequestParam Long userId,
            @RequestParam String title,
            @RequestParam String content) {

        UserEntity user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user"));

        // G·ª≠i notification web
        NotificationEntity notification = notificationService.send(user, title, content);

        // G·ª≠i email cho user
        if (user.getEmail() != null && !user.getEmail().isBlank()) {
            emailService.sendEmail(user.getEmail(), title, content);
        }

        // G·ª≠i email cho t·ª´ng b·ªánh nh√¢n thu·ªôc user ƒë√≥
        List<PatientEntity> patientList = patientRepository.findByUserEntity_Id(userId);
        for (PatientEntity patient : patientList) {
            if (patient.getEmail() != null && !patient.getEmail().isBlank()) {
                emailService.sendEmail(patient.getEmail(), title, content);
            }
        }

        return ResponseEntity.ok(notification);
    }



    // l·∫•y danh s√°ch th√¥ng b√°o c·ªßa user
    @GetMapping("/user/{userId}") // my
    public ResponseEntity<List<NotificationEntity>> getByUser(@PathVariable Long userId) {
//        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//        String email = auth.getName(); // username t·ª´ token
//        UserEntity user = userRepository.findByUsername(username).orElseThrow();

        return ResponseEntity.ok(notificationService.getAllByUserId(userId));

    }

    // g·ª≠i t·ª± ƒë·ªông khi ƒë·∫∑t l·ªãch
    @PostMapping("/appointment/{id}/notify")
    public ResponseEntity<String> notifyAppointment(@PathVariable("id") Long appointmentId) {
        AppointmentEntity appt = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn"));

        // L·∫•y th√¥ng tin li√™n quan
        PatientEntity patient = appt.getPatientEntity();
        UserEntity user = patient.getUserEntity();
        StaffEntity doctor = appt.getDoctorEntity().getStaffEntity();

        // L·∫•y t√™n
        String patientName = patient.getFullName();
        String doctorName = doctor.getFullName(); // Ho·∫∑c doctor.getUser().getFullName() n·∫øu c·∫ßn

        // L·∫•y th·ªùi gian ƒë·ªãnh d·∫°ng
        String time = appt.getStartTime()
                .toLocalDateTime().format(DateTimeFormatter.ofPattern("HH:mm dd/MM/yyyy"));

        // Ti√™u ƒë·ªÅ v√† n·ªôi dung th√¥ng b√°o
        String title = "üîî X√°c nh·∫≠n l·ªãch h·∫πn";
        String content = "B·ªánh nh√¢n " + patientName + " ƒë√£ ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ© " + doctorName + " v√†o l√∫c " + time + ".";

        // G·ª≠i email cho b·ªánh nh√¢n (ch√≠nh ng∆∞·ªùi c√≥ l·ªãch h·∫πn) v√† user
        notificationService.sendNotification(user.getId(), title, content);


        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o x√°c nh·∫≠n ƒë·∫∑t l·ªãch th√†nh c√¥ng.");
    }

    // Th√¥ng b√°o thay ƒë·ªïi l·ªãch h·∫πn
    @PostMapping("/appointment/{id}/change")
    public ResponseEntity<String> notifyAppointmentChange(@PathVariable("id") Long appointmentId) {
        AppointmentEntity appt = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn"));

        PatientEntity patient = appt.getPatientEntity();
        UserEntity user = patient.getUserEntity();
        StaffEntity doctor = appt.getDoctorEntity().getStaffEntity();

        String patientName = patient.getFullName();
        String doctorName = doctor.getFullName();
        String time = appt.getStartTime()
                .toLocalDateTime().format(DateTimeFormatter.ofPattern("HH:mm dd/MM/yyyy"));

        String title = "üîÑ L·ªãch h·∫πn ƒë√£ thay ƒë·ªïi";
        String content = "L·ªãch h·∫πn c·ªßa b·ªánh nh√¢n " + patientName +
                " v·ªõi b√°c sƒ© " + doctorName + " ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Th·ªùi gian m·ªõi: " + time + ".";

        // G·ª≠i notification + email
        notificationService.sendNotification(user.getId(), title, content);

        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o thay ƒë·ªïi l·ªãch h·∫πn.");
    }


    // Th√¥ng b√°o h·ªßy l·ªãch
    @PostMapping("/appointment/{id}/cancel")
    public ResponseEntity<String> notifyAppointmentCancel(@PathVariable("id") Long appointmentId) {
        AppointmentEntity appt = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn"));

        PatientEntity patient = appt.getPatientEntity();
        UserEntity user = patient.getUserEntity();
        StaffEntity doctor = appt.getDoctorEntity().getStaffEntity();

        String patientName = patient.getFullName();
        String doctorName = doctor.getFullName();
        String time = appt.getStartTime()
                .toLocalDateTime().format(DateTimeFormatter.ofPattern("HH:mm dd/MM/yyyy"));

        String title = "üö´ L·ªãch h·∫πn ƒë√£ b·ªã h·ªßy";
        String content = "L·ªãch h·∫πn c·ªßa b·ªánh nh√¢n " + patientName +
                " v·ªõi b√°c sƒ© " + doctorName + " v√†o l√∫c " + time +
                " ƒë√£ b·ªã h·ªßy.";

        // G·ª≠i notification v√† email
        notificationService.sendNotification(user.getId(), title, content);

        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o h·ªßy l·ªãch h·∫πn.");
    }


    // Th√¥ng b√°o nh·∫Øc tr∆∞·ªõc 1 ng√†y
    @GetMapping("/remind-tomorrow")
    public ResponseEntity<String> sendReminderForTomorrowAppointments() {
        LocalDateTime tomorrowStart = LocalDate.now().plusDays(1).atStartOfDay();
        LocalDateTime tomorrowEnd = tomorrowStart.plusDays(1).minusSeconds(1);

        List<AppointmentEntity> appts = appointmentRepository.findByStartTimeBetween(tomorrowStart, tomorrowEnd);

        for (AppointmentEntity appt : appts) {
            PatientEntity patient = appt.getPatientEntity();
            UserEntity user = patient.getUserEntity();
            StaffEntity doctor = appt.getDoctorEntity().getStaffEntity();

            String doctorName = doctor.getFullName();
            String patientName = patient.getFullName();
            String time = appt.getStartTime()
                    .toLocalDateTime().format(DateTimeFormatter.ofPattern("HH:mm dd/MM/yyyy"));

            String title = "üìÖ Nh·∫Øc l·ªãch kh√°m";
            String content = "Nh·∫Øc nh·ªü: L·ªãch kh√°m c·ªßa b·ªánh nh√¢n " + patientName +
                    " v·ªõi b√°c sƒ© " + doctorName + " s·∫Ω di·ªÖn ra v√†o l√∫c " + time + ".";

            notificationService.sendNotification(user.getId(), title, content);
        }

        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o nh·∫Øc l·ªãch cho c√°c cu·ªôc h·∫πn ng√†y mai.");
    }


    // Th√¥ng b√°o k·∫øt qu·∫£
//    @PostMapping("/appointment/{id}/lab-result")
//    public ResponseEntity<String> notifyLabResult(@PathVariable("id") Long appointmentId) {
//        AppointmentEntity appt = appointmentRepository.findById(appointmentId)
//                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn"));
//
//        PatientEntity patient = appt.getPatientEntity();
//        UserEntity user = patient.getUserEntity();
//        StaffEntity doctor = appt.getDoctorEntity().getStaffEntity();
//
//        // L·∫•y c√°c test_request_item c√≥ result kh√¥ng null
//        List<TestRequestEntity> testRequests = testRequestRepository.findByAppointmentId(appointmentId);
//
//        boolean hasResult = false;
//
//        for (TestRequestEntity testRequest : testRequests) {
//            List<TestRequestItemEntity> items = testRequestItemRepository.findByTestRequestId(testRequest.getId());
//            for (TestRequestItemEntity item : items) {
//                if (item.getResult() != null && !item.getResult().isBlank()) {
//                    hasResult = true;
//                    break;
//                }
//            }
//            if (hasResult) break;
//        }
//
//        if (!hasResult) {
//            return ResponseEntity.ok("Ch∆∞a c√≥ k·∫øt qu·∫£ x√©t nghi·ªám ƒë·ªÉ g·ª≠i.");
//        }
//
//        String doctorName = doctor.getFullName();
//        String patientName = patient.getFullName();
//
//        String title = "üß™ ƒê√£ c√≥ k·∫øt qu·∫£ x√©t nghi·ªám";
//        String content = "B·ªánh nh√¢n " + patientName + " ƒë√£ c√≥ k·∫øt qu·∫£ x√©t nghi·ªám t·ª´ b√°c sƒ© " + doctorName + ".";
//
//        notificationService.sendNotification(user.getId(), title, content);
//
//        return ResponseEntity.ok("ƒê√£ g·ª≠i th√¥ng b√°o k·∫øt qu·∫£ x√©t nghi·ªám.");
//    }





}


